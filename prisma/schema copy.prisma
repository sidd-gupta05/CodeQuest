generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  firstName String
  lastName  String
  phone     String?   @unique
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lab       Lab?
  patient   Patient[]

  @@map("users")
}

model Patient {
  id          String     @id @default(uuid())
  userId      String
  address     String?
  dateOfBirth DateTime?
  gender      String?
  latitude    Float      @default(0.0)
  longitude   Float      @default(0.0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  age         Int?
  firstName   String?
  lastName    String?
  phone       String?
  bookings    bookings[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patients")
}

model Lab {
  id                    String             @id @default(uuid())
  userId                String             @unique
  labLocation           String
  nablCertificateNumber String
  certificateUrl        String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  CustomReagent         CustomReagent[]
  attendances           attendances[]
  bookings              bookings[]
  employees             employee[]
  details               LabDetails?
  lab_inventory         lab_inventory[]
  timeSlots             LabTimeSlot[]
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedules             Schedule[]
  tests                 tests[]            @relation("AvailableTests")
  LeaveApplication      LeaveApplication[]

  @@map("labs")
}

model LabDetails {
  id               String    @id @default(uuid())
  labId            String    @unique
  collectionTypes  String[]
  experienceYears  Int?
  imageUrl         String?
  isLoved          Boolean?  @default(false)
  latitude         Float     @default(0.0)
  longitude        Float     @default(0.0)
  nextAvailable    DateTime?
  rating           Float?
  testType         String?
  labName          String
  isAvailable      Boolean   @default(true)
  labcontactNumber String?
  labemail         String?
  lab              Lab       @relation(fields: [labId], references: [id], onDelete: Cascade)

  @@map("lab_details")
}

model LabTimeSlot {
  id         String                 @id @default(uuid())
  labId      String
  time       String
  session    Session
  isActive   Boolean                @default(true)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  bookings   bookings[]
  lab        Lab                    @relation(fields: [labId], references: [id], onDelete: Cascade)
  exceptions LabTimeSlotException[]

  @@unique([labId, time])
  @@map("lab_time_slots")
}

model LabTimeSlotException {
  id            String      @id @default(uuid())
  labTimeSlotId String
  date          DateTime
  reason        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isUnavailable Boolean     @default(true)
  labTimeSlot   LabTimeSlot @relation(fields: [labTimeSlotId], references: [id], onDelete: Cascade)

  @@unique([labTimeSlotId, date])
  @@map("lab_timeslot_exceptions")
}

model Schedule {
  labId          String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  id             Int                    @id @default(autoincrement())
  availabilities ScheduleAvailability[]
  lab            Lab                    @relation(fields: [labId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

model ScheduleAvailability {
  dayOfWeek  DayOfWeek
  startTime  String
  endTime    String
  id         Int       @id @default(autoincrement())
  scheduleId Int
  schedule   Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("schedule_availabilities")
}

model Payment {
  id        String    @id @default(uuid())
  status    String
  amount    Float
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  bookingId String
  bookings  bookings  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model addons {
  id             String           @id
  name           String           @unique
  description    String?
  price          Float
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  booking_addons booking_addons[]
}

model booking_addons {
  id        String   @id
  bookingId String
  addonId   String
  createdAt DateTime @default(now())
  addons    addons   @relation(fields: [addonId], references: [id])
  bookings  bookings @relation(fields: [bookingId], references: [id])

  @@unique([bookingId, addonId])
}

model booking_tests {
  id        String   @id
  bookingId String
  testId    String
  createdAt DateTime @default(now())
  bookings  bookings @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tests     tests    @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([bookingId, testId])
}

model bookings {
  id             String           @id
  bookingId      String           @unique
  patientId      String
  labId          String
  timeSlotId     String?
  date           DateTime
  status         BookingStatus    @default(PENDING)
  totalAmount    Float
  qrCodeData     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  reportStatus   ReportStatus     @default(BOOKING_PENDING)
  allocatedEmpId String?
  reportUrl      String?
  booking_addons booking_addons[]
  booking_tests  booking_tests[]
  allocatedEmp   employee?        @relation(fields: [allocatedEmpId], references: [id])
  labs           Lab              @relation(fields: [labId], references: [id], onDelete: Cascade)
  patients       Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  lab_time_slots LabTimeSlot?     @relation(fields: [timeSlotId], references: [id])
  payments       Payment[]
  tests          tests[]          @relation("BookingTests")
}

model tests {
  id            String          @id
  name          String          @unique
  category      String
  description   String?
  price         Float
  duration      String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  TestReagent   TestReagent[]
  booking_tests booking_tests[]
  labs          Lab[]           @relation("AvailableTests")
  bookings      bookings[]      @relation("BookingTests")
}

model CustomReagent {
  id               String          @id
  labId            String
  name             String
  category         String?
  description      String?
  manufacturer     String?
  unit             String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  expiryDate       DateTime?
  quantity         Float?
  reorderThreshold Float?
  labs             Lab             @relation(fields: [labId], references: [id], onDelete: Cascade)
  lab_inventory    lab_inventory[]
}

model ReagentCatalog {
  id            String          @id
  name          String
  category      String?
  description   String?
  manufacturer  String?
  unit          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  TestReagent   TestReagent[]
  lab_inventory lab_inventory[]
}

model TestReagent {
  id              String         @id
  testId          String
  reagentId       String
  quantityPerTest Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  unit            String
  ReagentCatalog  ReagentCatalog @relation(fields: [reagentId], references: [id], onDelete: Cascade)
  tests           tests          @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, reagentId])
}

model lab_inventory {
  id               String          @id
  labId            String
  reagentId        String?
  customReagentId  String? // add this
  quantity         Float
  unit             String
  expiryDate       DateTime?
  reorderThreshold Float?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  batchNumber      String?
  labs             Lab             @relation(fields: [labId], references: [id], onDelete: Cascade)
  ReagentCatalog   ReagentCatalog? @relation(fields: [reagentId], references: [id], onDelete: Cascade)
  CustomReagent    CustomReagent?  @relation(fields: [customReagentId], references: [id], onDelete: Cascade)

  @@unique([labId, reagentId])
  @@unique([labId, customReagentId])
  @@map("lab_inventory")
}

model ReagentUsageLog {
  id               String      @id @default(uuid())
  labId            String
  testId           String
  bookingId        String
  reagentId        String
  quantityUsed     Float
  unit             String
  type             ReagentType // CATALOG or CUSTOM
  previousQuantity Float
  newQuantity      Float
  createdAt        DateTime    @default(now())

  @@map("reagent_usage_logs")
}

model employee {
  id               String             @id
  labId            String
  name             String
  role             String
  monthlySalary    Float
  department       String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  isFieldCollector Boolean?           @default(false)
  attendances      attendances[]
  bookings         bookings[]
  lab              Lab                @relation(fields: [labId], references: [id], onDelete: Cascade)
  LeaveApplication LeaveApplication[]
}

model attendances {
  id         String           @id
  employeeId String
  labId      String
  date       DateTime
  checkIn    DateTime?
  checkOut   DateTime?
  status     AttendanceStatus @default(PRESENT)
  totalHours Float?
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime
  employee   employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  labs       Lab              @relation(fields: [labId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
}

model LeaveApplication {
  id         String      @id @default(uuid())
  employeeId String
  labId      String
  startDate  DateTime
  endDate    DateTime
  leaveType  LeaveType
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employee   employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  lab        Lab         @relation(fields: [labId], references: [id], onDelete: Cascade)

  @@map("leave_applications")
}

enum LeaveType {
  SICK_LEAVE
  CASUAL_LEAVE
  EARNED_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  EMERGENCY_LEAVE
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Session {
  MORNING
  AFTERNOON
  EVENING
}

enum UserRole {
  PATIENT
  LAB
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ReportStatus {
  BOOKING_PENDING
  TEST_BOOKED
  SAMPLE_COLLECTED
  IN_LAB
  UNDER_REVIEW
  REPORT_READY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
  HOLIDAY
}

enum ReagentType {
  CATALOG
  CUSTOM
}
